import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

export default function CustomerRoom() {
  const [file, setFile] = useState(null);
  const [status, setStatus] = useState('');
  const [data, setData] = useState([]);
  const [duplicates, setDuplicates] = useState([]); // Th√™m state l∆∞u tr·ªØ c√°c b·∫£n sao
  const navigate = useNavigate();
  const API_BASE_URL = 'http://localhost:8080';

  useEffect(() => {
    fetchRoomData();
  }, []);

  const handleExport = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/api/customer-room/export`, {
        responseType: 'blob',
      });

      const url = window.URL.createObjectURL(new Blob([response.data]));

      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', 'customer_room.xlsx');
      document.body.appendChild(link);
      link.click();
      link.remove();

      setStatus('Xu·∫•t file Excel th√†nh c√¥ng!');
    } catch (err) {
      console.error(err);
      setStatus('Xu·∫•t file th·∫•t b·∫°i!');
    }
  };

  const fetchRoomData = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/api/customer-room/get-all-field`);
      let roomData = response.data;

      // T√°ch ri√™ng c√°c b·∫£n sao
      const duplicateItems = roomData.filter(item => item.duplicatedSTT !== null);
      setDuplicates(duplicateItems);

      // Merge ph√≤ng, n·∫øu ph√≤ng l√† 0 th√¨ g·ªôp v·ªõi ph√≤ng tr√™n
      roomData = mergeRooms(roomData);
      
      setData(roomData);
    } catch (err) {
      console.error(err);
      setStatus('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ph√≤ng!');
    }
  };

  const mergeRooms = (roomData) => {
    let previousRoom = null;

    return roomData.map((item, index) => {
      // N·∫øu ph√≤ng l√† 0, g√°n l·∫°i ph√≤ng c·ªßa d√≤ng tr√™n
      if (item.room === '0' && previousRoom !== null) {
        item.room = previousRoom; // G√°n gi√° tr·ªã ph√≤ng t·ª´ d√≤ng tr√™n
      } else {
        // N·∫øu ph√≤ng kh√¥ng ph·∫£i l√† 0, c·∫≠p nh·∫≠t ph√≤ng hi·ªán t·∫°i
        previousRoom = item.room;
      }
      return item;
    });
  };

  const handleUpload = async (e) => {
    e.preventDefault();

    if (!file) {
      setStatus('Vui l√≤ng ch·ªçn file Excel!');
      return;
    }

    const formData = new FormData();
    formData.append('file', file);

    try {
      const response = await axios.post(`${API_BASE_URL}/api/customer-room/import`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      setStatus(response.data || 'Import room th√†nh c√¥ng!');
      fetchRoomData();
    } catch (err) {
      console.error(err);
      setStatus(
        err.response?.data
          ? 'L·ªói khi import room: ' + err.response.data
          : 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh!'
      );
    }
  };

  const goToImportCustomer = () => {
    navigate('/import-customer');
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <h2 className="text-2xl font-semibold mb-4 text-blue-700">üì• Import Excel danh s√°ch kh√°ch + ph√≤ng</h2>
      <button
        onClick={goToImportCustomer}
        className="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 mb-6"
      >
        ‚ûï Sang trang Import Kh√°ch H√†ng
      </button>

      {/* Form upload */}
      <form onSubmit={handleUpload} className="flex items-center gap-4 mb-4">
        <input
          type="file"
          accept=".xlsx,.xls"
          onChange={(e) => {
            setFile(e.target.files[0]);
            setStatus('');
          }}
          className="border border-gray-300 rounded px-3 py-2"
        />
        <button
          type="submit"
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition"
        >
          Upload
        </button>
      </form>

      {status && (
        <p className="mt-2 font-semibold text-green-700">{status}</p>
      )}

      <h3 className="text-xl font-medium mt-8 mb-2 text-gray-800">üìã Danh s√°ch kh√°ch + ph√≤ng</h3>
      <div className="overflow-x-auto">
        <table className="min-w-full border border-gray-300 text-sm text-left">
          <thead className="bg-gray-100">
            <tr>
              <th className="px-4 py-2 border">STT</th>
              <th className="px-4 py-2 border">H·ªç t√™n</th>
              <th className="px-4 py-2 border">Gi·ªõi t√≠nh</th>
              <th className="px-4 py-2 border">Ng√†y sinh</th>
              <th className="px-4 py-2 border">Passport</th>
              <th className="px-4 py-2 border">Ng√†y c·∫•p</th>
              <th className="px-4 py-2 border">Ng√†y h·∫øt h·∫°n</th>
              <th className="px-4 py-2 border">Ph√≤ng</th>

            </tr>
          </thead>
          <tbody>
            {data.length === 0 ? (
              <tr>
                <td colSpan="8" className="text-center py-4">Kh√¥ng c√≥ d·ªØ li·ªáu.</td>
              </tr>
            ) : (
              data.map((item, index) => (
                <tr key={index} className="hover:bg-gray-50">
                  <td className="px-4 py-2 border">{index + 1}</td>
                  <td className="px-4 py-2 border">{item.fullName}</td>
                  <td className="px-4 py-2 border">{item.sex || '-'}</td>
                  <td className="px-4 py-2 border">{item.dob || '-'}</td>
                  <td className="px-4 py-2 border">{item.passportNo || '-'}</td>
                  <td className="px-4 py-2 border">{item.doi || '-'}</td>
                  <td className="px-4 py-2 border">{item.doe || '-'}</td>

                  {/* Ph√≤ng v·ªõi merge */}
                  <td 
                    className={`px-4 py-2 border ${index > 0 && data[index - 1].room === '0' ? 'border-b-0' : ''}`}
                  >
                    {item.room === '0' && data[index - 1] ? data[index - 1].room : item.room}
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Di chuy·ªÉn th√¥ng tin tr√πng l·∫∑p ra ngo√†i b·∫£ng */}
      {duplicates.length > 0 && (
        <div className="mt-4">
          <h4 className="font-semibold text-red-600">Danh s√°ch tr√πng l·∫∑p:</h4>
          <ul className="list-disc pl-6">
            {duplicates.map((item, index) => (
              <li key={index}>
                Kh√°ch h√†ng {item.fullName} (STT: {item.stt}) b·ªã tr√πng v·ªõi STT: {item.duplicatedSTT}
              </li>
            ))}
          </ul>
        </div>
      )}

      <div className="mt-4">
        <button
          onClick={handleExport}
          className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition"
        >
          üì§ Export Excel
        </button>
      </div>
    </div>
  );
}
